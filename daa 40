#include <stdio.h>
#include <stdbool.h>

#define V 10

void printSolution(int path[], int n) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < n; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]); // Complete the circuit
}

bool isSafe(int v, bool graph[V][V], int path[], int pos) {
    if (!graph[path[pos - 1]][v])
        return false;

    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

bool hamiltonianCycleUtil(bool graph[V][V], int path[], int pos, int n) {
    if (pos == n) {
        if (graph[path[pos - 1]][path[0]])
            return true;
        else
            return false;
    }

    for (int v = 1; v < n; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;
            if (hamiltonianCycleUtil(graph, path, pos + 1, n))
                return true;
            path[pos] = -1; // backtrack
        }
    }

    return false;
}

bool hamiltonianCycle(bool graph[V][V], int n) {
    int path[V];
    for (int i = 0; i < n; i++)
        path[i] = -1;

    path[0] = 0; // Start from vertex 0

    if (!hamiltonianCycleUtil(graph, path, 1, n)) {
        printf("Hamiltonian Circuit does not exist\n");
        return false;
    }

    printSolution(path, n);
    return true;
}

int main() {
    int n;
    printf("Enter the number of vertices in the graph (<=10): ");
    scanf("%d", &n);
    if (n > 10 || n <= 0) {
        printf("Invalid input.\n");
        return 1;
    }

    bool graph[V][V];
    printf("Enter the adjacency matrix for the graph (%d x %d matrix):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    hamiltonianCycle(graph, n);

    return 0;
}
